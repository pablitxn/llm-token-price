// <auto-generated />
using System;
using LlmTokenPrice.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LlmTokenPrice.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251021214442_AddAuditLog")]
    partial class AddAuditLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("idx_audit_logs_action");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("idx_audit_logs_entity_id");

                    b.HasIndex("EntityType")
                        .HasDatabaseName("idx_audit_logs_entity_type");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_audit_logs_timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_audit_logs_user_id");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("idx_audit_logs_entity");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.Benchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BenchmarkName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FullName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Interpretation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("TypicalRangeMax")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("TypicalRangeMin")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("WeightInQaps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("BenchmarkName")
                        .IsUnique()
                        .HasDatabaseName("unique_benchmark_name");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_benchmarks_is_active");

                    b.ToTable("benchmarks", (string)null);
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.BenchmarkScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BenchmarkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("NormalizedScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("TestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("BenchmarkId")
                        .HasDatabaseName("idx_scores_benchmark");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("idx_scores_model");

                    b.HasIndex("ModelId", "BenchmarkId")
                        .IsUnique()
                        .HasDatabaseName("unique_model_benchmark");

                    b.ToTable("model_benchmark_scores", (string)null);
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.Capability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContextWindow")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxOutputTokens")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SupportsAudioInput")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SupportsAudioOutput")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SupportsFunctionCalling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SupportsJsonMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SupportsStreaming")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("SupportsVision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ModelId")
                        .IsUnique()
                        .HasDatabaseName("unique_model_capability");

                    b.ToTable("model_capabilities", (string)null);
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD");

                    b.Property<decimal>("InputPricePer1M")
                        .HasColumnType("decimal(10,6)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastScrapedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("OutputPricePer1M")
                        .HasColumnType("decimal(10,6)");

                    b.Property<DateTime?>("PricingUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PricingValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PricingValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PricingUpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("idx_models_pricing_updated");

                    b.HasIndex("Provider")
                        .HasDatabaseName("idx_models_provider");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_models_status");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("idx_models_updated");

                    b.HasIndex("Name", "Provider")
                        .IsUnique()
                        .HasDatabaseName("unique_model_provider");

                    b.ToTable("models", (string)null);
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.BenchmarkScore", b =>
                {
                    b.HasOne("LlmTokenPrice.Domain.Entities.Benchmark", "Benchmark")
                        .WithMany("Scores")
                        .HasForeignKey("BenchmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LlmTokenPrice.Domain.Entities.Model", "Model")
                        .WithMany("BenchmarkScores")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benchmark");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.Capability", b =>
                {
                    b.HasOne("LlmTokenPrice.Domain.Entities.Model", "Model")
                        .WithOne("Capability")
                        .HasForeignKey("LlmTokenPrice.Domain.Entities.Capability", "ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.Benchmark", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("LlmTokenPrice.Domain.Entities.Model", b =>
                {
                    b.Navigation("BenchmarkScores");

                    b.Navigation("Capability");
                });
#pragma warning restore 612, 618
        }
    }
}
