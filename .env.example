# LLM Token Price Platform - Environment Variables Configuration
# Copy this file to .env and fill in your actual values
# DO NOT commit .env file to version control

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL connection string with optimized connection pooling
# Pooling Parameters:
#   - Pooling=true: Enables connection pooling (default, but explicit is better)
#   - Minimum Pool Size=5: Maintains 5 warm connections for faster responses
#   - Maximum Pool Size=100: Limits to 100 concurrent connections under load
#   - Connection Idle Lifetime=300: Recycles idle connections after 5 minutes
#   - Connection Pruning Interval=10: Checks for idle connections every 10 seconds
#
# Production Example:
DATABASE_CONNECTION_STRING="Host=prod-db.example.com;Port=5432;Database=llmpricing;Username=llmpricing_user;Password=YOUR_SECURE_PASSWORD;Pooling=true;Minimum Pool Size=5;Maximum Pool Size=100;Connection Idle Lifetime=300;Connection Pruning Interval=10;"

# Development Example (local Docker):
# DATABASE_CONNECTION_STRING="Host=localhost;Port=5434;Database=llmpricing_dev;Username=llmpricing;Password=dev_password;Pooling=true;Minimum Pool Size=5;Maximum Pool Size=100;Connection Idle Lifetime=300;Connection Pruning Interval=10;"

# =============================================================================
# REDIS CACHE CONFIGURATION
# =============================================================================
# Redis connection string for caching layer (optional - app will run without it)
# Format: host:port,abortConnect=false
# abortConnect=false enables graceful degradation if Redis is unavailable
REDIS_CONNECTION_STRING="localhost:6379,abortConnect=false"

# Production Example:
# REDIS_CONNECTION_STRING="prod-redis.example.com:6379,password=YOUR_REDIS_PASSWORD,abortConnect=false,ssl=true"

# Redis instance name prefix (default: llmpricing:)
REDIS_INSTANCE_NAME="llmpricing:"

# Redis default cache expiration (format: HH:MM:SS, default: 1 hour)
REDIS_DEFAULT_EXPIRY="01:00:00"

# =============================================================================
# JWT AUTHENTICATION CONFIGURATION
# =============================================================================
# CRITICAL: Use a strong, randomly generated secret key (minimum 32 characters)
# Generate with: openssl rand -base64 48
JWT_SECRET_KEY="YOUR_SECURE_JWT_SECRET_KEY_MINIMUM_32_CHARACTERS_FOR_HS256_ALGORITHM"

# JWT token issuer (your API domain)
JWT_ISSUER="llm-token-price-api"

# JWT token audience (your frontend domain)
JWT_AUDIENCE="llm-token-price-frontend"

# JWT token expiration in hours (default: 24 hours)
JWT_EXPIRATION_HOURS="24"

# =============================================================================
# ADMIN CREDENTIALS
# =============================================================================
# CRITICAL: Change these default credentials immediately in production
# These are bootstrap credentials for initial admin access
ADMIN_USERNAME="admin"
ADMIN_PASSWORD="YOUR_SECURE_ADMIN_PASSWORD"

# =============================================================================
# CORS CONFIGURATION
# =============================================================================
# Allowed frontend origins (comma-separated for multiple origins)
# Development:
CORS_ALLOWED_ORIGINS="http://localhost:5173"
# Production Example:
# CORS_ALLOWED_ORIGINS="https://llmpricing.com,https://www.llmpricing.com"

# =============================================================================
# RATE LIMITING CONFIGURATION (Task 7 - not yet implemented)
# =============================================================================
# Maximum requests per minute per IP address for admin endpoints
RATE_LIMIT_ADMIN_PER_MINUTE="100"

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Log level (options: Trace, Debug, Information, Warning, Error, Critical)
# Development: Debug or Information
# Production: Information or Warning
LOG_LEVEL="Information"

# =============================================================================
# ENVIRONMENT
# =============================================================================
# Application environment (Development, Staging, Production)
ASPNETCORE_ENVIRONMENT="Production"

# =============================================================================
# HEALTH CHECK ENDPOINTS (optional)
# =============================================================================
# Enable health check endpoints for monitoring (true/false)
ENABLE_HEALTH_CHECKS="true"

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================
# 1. Never commit .env file to version control
# 2. Use environment-specific configuration in CI/CD (GitHub Actions secrets)
# 3. Rotate JWT_SECRET_KEY and database passwords regularly
# 4. Monitor connection pool metrics in production (use pg_stat_database)
# 5. Test database connection pooling under load before deployment
# 6. Ensure PostgreSQL max_connections > Maximum Pool Size (recommend 200+)
#
# Related Tasks:
# - Task 19: Move secrets to environment variables (AC#20)
# - Task 20: Optimize database connection pooling (AC#21)
# - Task 18: Configure CORS for production (AC#19)
