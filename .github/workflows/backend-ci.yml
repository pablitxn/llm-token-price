name: Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'services/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:2.13.0-pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test
          POSTGRES_DB: llmpricing_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./services/backend

      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: ./services/backend

      - name: Run tests with coverage
        id: test-run
        run: |
          dotnet test --no-build --verbosity normal --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger "trx;LogFileName=test-results.trx" \
            --logger "console;verbosity=detailed"
        working-directory: ./services/backend
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=llmpricing_test;Username=postgres;Password=test"
          ConnectionStrings__RedisConnection: "localhost:6379"
        continue-on-error: true

      - name: Parse test results
        id: test-results
        if: always()
        run: |
          # Count test results from all TRX files
          TOTAL=0
          PASSED=0
          FAILED=0
          SKIPPED=0

          for trx in $(find ./coverage -name "test-results.trx"); do
            TOTAL=$((TOTAL + $(grep -o '<UnitTestResult' "$trx" | wc -l)))
            PASSED=$((PASSED + $(grep -o 'outcome="Passed"' "$trx" | wc -l)))
            FAILED=$((FAILED + $(grep -o 'outcome="Failed"' "$trx" | wc -l)))
            SKIPPED=$((SKIPPED + $(grep -o 'outcome="NotExecuted"' "$trx" | wc -l)))
          done

          # Calculate pass rate
          if [ $TOTAL -gt 0 ]; then
            PASS_RATE=$(awk "BEGIN {printf \"%.1f\", ($PASSED/$TOTAL)*100}")
          else
            PASS_RATE=0
          fi

          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT

          echo "üìä Test Results: $PASSED/$TOTAL passed ($PASS_RATE%)"
        working-directory: ./services/backend

      - name: Comment test results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Backend Test Results')
            );

            const total = '${{ steps.test-results.outputs.total }}';
            const passed = '${{ steps.test-results.outputs.passed }}';
            const failed = '${{ steps.test-results.outputs.failed }}';
            const skipped = '${{ steps.test-results.outputs.skipped }}';
            const passRate = '${{ steps.test-results.outputs.pass_rate }}';
            const status = parseFloat(passRate) >= 95.0 ? '‚úÖ' : '‚ùå';

            const body = `### ${status} Backend Test Results

            | Metric | Value |
            |--------|-------|
            | **Total Tests** | ${total} |
            | **Passed** | ${passed} ‚úÖ |
            | **Failed** | ${failed} ‚ùå |
            | **Skipped** | ${skipped} ‚è≠Ô∏è |
            | **Pass Rate** | **${passRate}%** |
            | **Required** | 95.0% |

            ${parseFloat(passRate) >= 95.0
              ? '‚úÖ **All tests passed!** Test suite is production-ready.'
              : '‚ùå **Tests failed!** Pass rate below required 95.0% threshold.'}

            <details>
            <summary>Coverage Report</summary>

            Coverage reports will be available on [Codecov](https://codecov.io/gh/${{ github.repository }})
            </details>

            ---
            *Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Enforce test pass rate (95% minimum)
        if: always()
        run: |
          PASS_RATE="${{ steps.test-results.outputs.pass_rate }}"
          FAILED="${{ steps.test-results.outputs.failed }}"

          echo "üìä Final Test Results:"
          echo "   Pass Rate: $PASS_RATE%"
          echo "   Required:  95.0%"

          if (( $(echo "$PASS_RATE < 95.0" | bc -l) )); then
            echo "‚ùå FAILED: Test pass rate ($PASS_RATE%) is below required 95.0%"
            exit 1
          elif [ "$FAILED" -gt 0 ]; then
            echo "‚ùå FAILED: $FAILED test(s) failed"
            exit 1
          else
            echo "‚úÖ PASSED: All quality gates met"
          fi
        working-directory: ./services/backend

      - name: Upload coverage reports to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./services/backend/coverage/**/coverage.cobertura.xml
          flags: backend
          name: backend-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
