name: Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'services/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:2.13.0-pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test
          POSTGRES_DB: llmpricing_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./services/backend

      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: ./services/backend

      - name: Run tests with coverage
        id: test-run
        run: |
          dotnet test --no-build --verbosity normal --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger "trx;LogFileName=test-results.trx" \
            --logger "console;verbosity=detailed"
        working-directory: ./services/backend
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=llmpricing_test;Username=postgres;Password=test"
          ConnectionStrings__RedisConnection: "localhost:6379"
        continue-on-error: true

      - name: Parse test results
        id: test-results
        if: always()
        run: |
          # Count test results from all TRX files
          TOTAL=0
          PASSED=0
          FAILED=0
          SKIPPED=0

          for trx in $(find ./coverage -name "test-results.trx"); do
            TOTAL=$((TOTAL + $(grep -o '<UnitTestResult' "$trx" | wc -l)))
            PASSED=$((PASSED + $(grep -o 'outcome="Passed"' "$trx" | wc -l)))
            FAILED=$((FAILED + $(grep -o 'outcome="Failed"' "$trx" | wc -l)))
            SKIPPED=$((SKIPPED + $(grep -o 'outcome="NotExecuted"' "$trx" | wc -l)))
          done

          # Calculate pass rate
          if [ $TOTAL -gt 0 ]; then
            PASS_RATE=$(awk "BEGIN {printf \"%.1f\", ($PASSED/$TOTAL)*100}")
          else
            PASS_RATE=0
          fi

          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT

          echo "üìä Test Results: $PASSED/$TOTAL passed ($PASS_RATE%)"
        working-directory: ./services/backend

      - name: Parse coverage results
        id: coverage-results
        if: always()
        run: |
          # Find coverage files
          COVERAGE_FILES=$(find ./coverage -name "coverage.cobertura.xml" | head -1)

          if [ -z "$COVERAGE_FILES" ]; then
            echo "‚ö†Ô∏è  No coverage files found"
            echo "line_coverage=0" >> $GITHUB_OUTPUT
            echo "branch_coverage=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse Cobertura XML to extract metrics
          # Line coverage: lines-covered / lines-valid
          LINES_COVERED=$(grep -oP 'lines-covered="\K[0-9]+' "$COVERAGE_FILES" | head -1)
          LINES_VALID=$(grep -oP 'lines-valid="\K[0-9]+' "$COVERAGE_FILES" | head -1)

          # Branch coverage: branches-covered / branches-valid
          BRANCHES_COVERED=$(grep -oP 'branches-covered="\K[0-9]+' "$COVERAGE_FILES" | head -1)
          BRANCHES_VALID=$(grep -oP 'branches-valid="\K[0-9]+' "$COVERAGE_FILES" | head -1)

          # Calculate percentages
          if [ "$LINES_VALID" -gt 0 ]; then
            LINE_COV=$(awk "BEGIN {printf \"%.1f\", ($LINES_COVERED/$LINES_VALID)*100}")
          else
            LINE_COV=0
          fi

          if [ "$BRANCHES_VALID" -gt 0 ]; then
            BRANCH_COV=$(awk "BEGIN {printf \"%.1f\", ($BRANCHES_COVERED/$BRANCHES_VALID)*100}")
          else
            BRANCH_COV=0
          fi

          echo "line_coverage=$LINE_COV" >> $GITHUB_OUTPUT
          echo "branch_coverage=$BRANCH_COV" >> $GITHUB_OUTPUT
          echo "lines_covered=$LINES_COVERED" >> $GITHUB_OUTPUT
          echo "lines_valid=$LINES_VALID" >> $GITHUB_OUTPUT
          echo "branches_covered=$BRANCHES_COVERED" >> $GITHUB_OUTPUT
          echo "branches_valid=$BRANCHES_VALID" >> $GITHUB_OUTPUT

          echo "üìä Coverage Results: Line $LINE_COV%, Branch $BRANCH_COV%"
        working-directory: ./services/backend

      - name: Comment test results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Backend Test Results')
            );

            const total = '${{ steps.test-results.outputs.total }}';
            const passed = '${{ steps.test-results.outputs.passed }}';
            const failed = '${{ steps.test-results.outputs.failed }}';
            const skipped = '${{ steps.test-results.outputs.skipped }}';
            const passRate = '${{ steps.test-results.outputs.pass_rate }}';
            const lineCov = '${{ steps.coverage-results.outputs.line_coverage }}';
            const branchCov = '${{ steps.coverage-results.outputs.branch_coverage }}';
            const linesCovered = '${{ steps.coverage-results.outputs.lines_covered }}';
            const linesValid = '${{ steps.coverage-results.outputs.lines_valid }}';

            const testStatus = parseFloat(passRate) >= 95.0 ? '‚úÖ' : '‚ùå';
            const covStatus = parseFloat(lineCov) >= 70.0 ? '‚úÖ' : '‚ö†Ô∏è';

            const body = `### ${testStatus} Backend Test Results & Coverage

            #### üß™ Test Results

            | Metric | Value | Target |
            |--------|-------|--------|
            | **Total Tests** | ${total} | - |
            | **Passed** | ${passed} ‚úÖ | - |
            | **Failed** | ${failed} ‚ùå | 0 |
            | **Skipped** | ${skipped} ‚è≠Ô∏è | - |
            | **Pass Rate** | **${passRate}%** | ‚â•95.0% |

            ${parseFloat(passRate) >= 95.0
              ? '‚úÖ **All tests passed!** Test suite is production-ready.'
              : '‚ùå **Tests failed!** Pass rate below required 95.0% threshold.'}

            #### üìä Code Coverage

            | Metric | Value | Target |
            |--------|-------|--------|
            | **Line Coverage** | **${lineCov}%** | ‚â•70.0% |
            | **Branch Coverage** | ${branchCov}% | ‚â•60.0% |
            | **Lines Covered** | ${linesCovered}/${linesValid} | - |

            ${parseFloat(lineCov) >= 70.0
              ? '‚úÖ **Coverage meets target!** Code is well-tested.'
              : '‚ö†Ô∏è **Coverage below target.** Consider adding more tests.'}

            <details>
            <summary>üìà Coverage by Layer</summary>

            **Target Coverage by Assembly:**
            - Domain: ‚â•90% (business logic)
            - Application: ‚â•85% (use cases)
            - Infrastructure: ‚â•75% (adapters)
            - API: ‚â•50% (thin controllers)

            Full coverage reports available on [Codecov](https://codecov.io/gh/${{ github.repository }})
            </details>

            ---
            *Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Enforce test pass rate (95% minimum)
        if: always()
        run: |
          PASS_RATE="${{ steps.test-results.outputs.pass_rate }}"
          FAILED="${{ steps.test-results.outputs.failed }}"

          echo "üìä Final Test Results:"
          echo "   Pass Rate: $PASS_RATE%"
          echo "   Required:  95.0%"

          if (( $(echo "$PASS_RATE < 95.0" | bc -l) )); then
            echo "‚ùå FAILED: Test pass rate ($PASS_RATE%) is below required 95.0%"
            exit 1
          elif [ "$FAILED" -gt 0 ]; then
            echo "‚ùå FAILED: $FAILED test(s) failed"
            exit 1
          else
            echo "‚úÖ PASSED: All quality gates met"
          fi
        working-directory: ./services/backend

      - name: Upload coverage reports to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./services/backend/coverage/**/coverage.cobertura.xml
          flags: backend
          name: backend-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
